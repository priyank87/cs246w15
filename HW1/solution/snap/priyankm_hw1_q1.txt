/*
Author: Priyank Mathur
Suggest people a user might know
*/

package edu.stanford.cs246.friendrecommender;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Comparator;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map.Entry;
import java.util.PriorityQueue;
import java.util.Stack;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.conf.Configured;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.input.TextInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
import org.apache.hadoop.mapreduce.lib.output.TextOutputFormat;
import org.apache.hadoop.util.Tool;
import org.apache.hadoop.util.ToolRunner;

public class FriendRecommender extends Configured implements Tool {
   public static void main(String[] args) throws Exception {
      System.out.println(Arrays.toString(args));
      int res = ToolRunner.run(new Configuration(), new FriendRecommender(), args);
      
      System.exit(res);
   }

   @Override
   public int run(String[] args) throws Exception {
      System.out.println(Arrays.toString(args));
      Job job = new Job(getConf(), "FriendRecommender");
      job.setJarByClass(FriendRecommender.class);
      job.setOutputKeyClass(IntWritable.class);
      job.setOutputValueClass(Text.class);

      job.setMapperClass(Map.class);
      job.setReducerClass(Reduce.class);

      job.setInputFormatClass(TextInputFormat.class);
      job.setOutputFormatClass(TextOutputFormat.class);

      FileInputFormat.addInputPath(job, new Path(args[0]));
      FileOutputFormat.setOutputPath(job, new Path(args[1]));

      job.waitForCompletion(true);
      
      return 0;
   }
   
   public static class Map extends Mapper<LongWritable, Text, IntWritable, Text> {
	   Text dist1Text = new Text();
	   Text dist2Text = new Text();
	  
      @Override
      public void map(LongWritable key, Text value, Context context)
              throws IOException, InterruptedException {
    	  
    	  
    	  // Get the information from the line
    	  String line = value.toString();
    	  String[] users = line.split("\\t");
    	  String friendString = users.length > 1 ? users[1] : "";
    	  String[] friends = friendString.split(",");
    	  
    	  /* Loop through friends list to generate pairs of following types -
    	   * For line : 1	2,3
    	   * we generate the following pairs
    	   * 1	1-2
    	   * 1	1-3
    	   * 2	2-3
    	   * 
    	   * Where the value is of the form distance-user2
    	   */
    	  for (int i=0; !friendString.equals("") && i<friends.length; i++) {
    		  String dist1Str = "1-" + friends[i];
    		  dist1Text.set(dist1Str);
    		  context.write(new IntWritable(Integer.parseInt(users[0])), dist1Text);
    		  
    		  // Generate pairs with distance 2
    		  for (int j=i+1; j<friends.length; j++) {
    			  String dist2Str = "2-" + friends[j];
    			  dist2Text.set(dist2Str);
    			  context.write(new IntWritable(Integer.parseInt(friends[i])), dist2Text);
    			  
    			  dist2Str = "2-" + friends[i];
    			  dist2Text.set(dist2Str);
    			  context.write(new IntWritable(Integer.parseInt(friends[j])), dist2Text);
    		  }
    	  }
      }
   }

   public static class Reduce extends Reducer<IntWritable, Text, IntWritable, Text> {
	   
	   /*
	    * For each user user1, keep track of how many common friends does he
	    * have with another user user2. Then remove direct relations and
	    * output the distance 2 users sorted by the number of mutual friends.
	    */
	   
      @Override
      public void reduce(IntWritable key, Iterable<Text> values, Context context)
              throws IOException, InterruptedException {
         HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
         
         for (Text val : values) {
            String association = val.toString();
            int length = Integer.parseInt(association.split("-")[0]);
            int friend = Integer.parseInt(association.split("-")[1]);
            
            // Keep track of other users and their distance
            if (length == 1)
            	map.put(friend, 0);
            else if (length == 2) {
            	if (map.containsKey(friend)) {
            		if (map.get(friend)!=0)
            			map.put(friend, map.get(friend)+1);
            	}
            	else {
            		map.put(friend, 1);
            	}
            }
         }
         
         PriorityQueue<Entry<Integer, Integer>> queue = new PriorityQueue<Entry<Integer, Integer>>(10, new EntryComparator());
         
         // Put them in a priority queue to get the 10 users
         // with most number of mutual friends
         for (Entry<Integer, Integer> e: map.entrySet()) {
        	 if (e.getValue()==0)
        		 continue;
        	 
        	 if (queue.size() < 10)
        		 queue.add(e);
        	 else {
        		 int tempValue = ((Entry<Integer, Integer>) queue.peek()).getValue();
        		 int tempKey = ((Entry<Integer, Integer>) queue.peek()).getKey();
        		 
        		 if ((tempValue < e.getValue()) || (tempValue == e.getValue() && tempKey > e.getKey())){
        			 queue.poll();
        			 queue.add(e);
        		 }
        	 }
         }
         
         String recommendations = "";
         Stack<Entry<Integer, Integer>> reverser = new Stack<Entry<Integer, Integer>>();
         
         // Reverse the order
         while (queue.size() > 0) {
        	 reverser.push(queue.poll());
         }
         
         if (reverser.size() > 0) {
        	 Entry<Integer, Integer> element = reverser.pop();
        	 recommendations += element.getKey();
         }
         
         while (reverser.size() > 0) {
        	 Entry<Integer, Integer> element = reverser.pop();
        	 recommendations += "," + element.getKey();
         }
         
         Text recommendationsText = new Text(recommendations);
         
         // Write out the output
         context.write(key, recommendationsText);
      }
   }
}

/*
 * Comparator to sort the entries in the priority queue
 * first by value and then by ascending numerical order
 * of the keys
 */
class EntryComparator implements Comparator<Entry<Integer, Integer>>
{
    public int compare(Entry<Integer, Integer> e1, Entry<Integer, Integer> e2)
    {
    	if (e1.getValue() != e2.getValue())
    		return e1.getValue().compareTo(e2.getValue());
    	else
    		return e2.getKey().compareTo(e1.getKey());
    }
}